apply plugin: 'com.android.application'
apply from: "build-jacoco.gradle"

Properties localProperties = new Properties()
def localhostAddress = InetAddress.getLocalHost().getHostAddress()
try {
    localProperties.load(project.rootProject.file('local.properties').newDataInputStream())
    if (localhostAddress == '127.0.0.1' || !localhostAddress.contains('192')) {
        localhostAddress = localProperties.getProperty('my.localhost')
    }
} catch (Exception e) {
    println("You can't access local.properties file. Your localhost Address is " + localhostAddress);
}

project.ext.set("packageID", "Fomes")

def majorVersion = 0
def minorVersion = 4
def patchVersion = 0

android {
    compileSdkVersion 29
    buildToolsVersion '29.0.2'
    defaultConfig {
        applicationId "com.formakers.fomes"
        minSdkVersion 22
        targetSdkVersion 29
        multiDexEnabled true
        versionCode 75
        versionName "${majorVersion}.${minorVersion}.${patchVersion}"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        buildConfigField 'String', 'YOUTUBE_API_KEY', "\"${String.valueOf(System.getenv("YOUTUBE_API_KEY"))}\""
    }
    signingConfigs {
        debug {
            storeFile file('./debug.keystore')
        }
        release {
            keyAlias System.getenv("FOMES_KEY_ALIAS")
            keyPassword System.getenv("FOMES_KEY_PASSWORD")
            storeFile file(String.valueOf(System.getenv("FOMES_KEYSTORE")))
            storePassword System.getenv("FOMES_KEYSTORE_PASSWORD")
        }
    }
    buildTypes {
        debug {
            debuggable true
            testCoverageEnabled true
            buildConfigField 'String', 'SERVER_BASE_URL', "\"http://${localhostAddress}:8080/\""

            signingConfig signingConfigs.debug

            // crashlytics 실행하지 않음
            manifestPlaceholders = [
                    enableCrashReporting:"false",
                    kakaoAppKey: rootProject.ext.kakaoApiKey.debug,
            ]

            // crashlytics 플러그인을 사용하지 않음
            ext.enableCrashlytics = false

            // crashlytics 빌드 ID 업데이트 막기
            ext.alwaysUpdateBuildId = false
        }
        // DEV
        development {
            debuggable true
            shrinkResources true
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField 'String', 'SERVER_BASE_URL', '"https://appbee-server-dev.herokuapp.com/"'
            signingConfig signingConfigs.debug
//            signingConfig signingConfigs.release
            manifestPlaceholders = [
                    enableCrashReporting:"true",
                    kakaoAppKey: rootProject.ext.kakaoApiKey.debug,
            ]
        }
        // STG
        staging {
            debuggable true
            shrinkResources true
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField 'String', 'SERVER_BASE_URL', '"https://appbee-server-stg.herokuapp.com/"'
            signingConfig signingConfigs.release
            manifestPlaceholders = [
                    enableCrashReporting:"false",
                    kakaoAppKey: rootProject.ext.kakaoApiKey.debug,
            ]
        }
        // PRD
        release {
            shrinkResources true
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField 'String', 'SERVER_BASE_URL', '"https://appbee.xyz/"'
            signingConfig signingConfigs.release
            manifestPlaceholders = [
                    enableCrashReporting:"true",
                    kakaoAppKey: rootProject.ext.kakaoApiKey.release,
            ]
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    testOptions {
        unitTests {
            includeAndroidResources = true
            all {
                forkEvery = 5
                jacoco {
                    includeNoLocationClasses = true
                    excludeClassLoaders = [ 'jdk.internal.reflect.DelegatingClassLoader' ]
                }
            }
        }
    }
    configurations.all {
        resolutionStrategy.force 'com.google.code.findbugs:jsr305:1.3.9'
    }

    applicationVariants.all { variant ->
//        variant.javaCompile.options.compilerArgs += '-Xmaxerrs'
//        variant.javaCompile.options.compilerArgs += '10000'
//        variant.buildType.name        // BuildType
//        variant.getFlavors()[1].name  // Flavor

        variant.outputs.each { output ->
            // Copy the mapping file if Proguard is turned on for this build
            if (variant.getBuildType().isMinifyEnabled()) {
                variant.assemble.doLast {

                    copy {
                        from variant.mappingFile
                        into output.outputFile.parent
                        rename { String fileName ->
                            "${packageID}-${variant.versionName}-${variant.name}-mapping.txt"
                        }
                    }
                }
            }
        }

        variant.outputs.all {
            outputFileName = "${packageID}-${variant.versionName}-${variant.name}.apk"
        }
    }
}

android.applicationVariants.all {
    def aptOutputDir = new File(buildDir, "generated/source/apt/${it.unitTestVariant.dirName}")
    it.unitTestVariant.addJavaSourceFoldersToModel(aptOutputDir)
}

android.applicationVariants.all { variant ->
    def productFlavor = variant.productFlavors[0] != null ? "${variant.productFlavors[0].name.capitalize()}" : ""
    def buildType = "${variant.buildType.name.capitalize()}"
    tasks["compile${productFlavor}${buildType}UnitTestSources"].dependsOn(tasks["merge${productFlavor}${buildType}Assets"])
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'com.google.android.material:material:1.3.0-alpha01'
    implementation 'com.google.android:flexbox:2.0.1'
    // retrofit
    implementation 'com.squareup.retrofit2:retrofit:2.6.2'
    implementation 'com.squareup.retrofit2:converter-gson:2.6.2'
    implementation 'com.squareup.retrofit2:adapter-rxjava:2.1.0'
    // okHttp
    implementation 'com.squareup.okhttp3:okhttp:3.12.5'
    implementation 'com.squareup.okhttp3:logging-interceptor:3.12.5'
    // gson
    implementation 'com.google.code.gson:gson:2.8.6'
    // butterknife
    implementation 'com.jakewharton:butterknife:10.1.0'
    annotationProcessor 'com.jakewharton:butterknife-compiler:10.1.0'
    testAnnotationProcessor 'com.jakewharton:butterknife-compiler:10.1.0'
    // dagger
    api 'com.google.dagger:dagger:2.24'
    annotationProcessor 'com.google.dagger:dagger-compiler:2.24'
    testAnnotationProcessor 'com.google.dagger:dagger-compiler:2.24'
    // rxJava
    implementation 'io.reactivex:rxandroid:1.2.1'
    implementation 'io.reactivex:rxjava:1.3.8'
    implementation 'io.reactivex:rxjava-math:1.0.0'
    // guava
    api 'com.google.guava:guava:27.1-android'
    implementation 'com.google.guava:guava:27.1-jre'
    // Glide
    annotationProcessor 'androidx.annotation:annotation:1.1.0'
    implementation 'com.github.bumptech.glide:glide:4.8.0'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.8.0'
    // google auth
    implementation 'com.google.android.gms:play-services-auth:18.0.0'
    implementation('com.google.api-client:google-api-client:1.23.0') {
        exclude group: 'org.apache.httpcomponents', module: 'httpclient'
        exclude group: 'com.google.guava', module: 'guava-jdk5'
    }
    implementation('com.google.api-client:google-api-client-android:1.23.0') {
        exclude group: 'org.apache.httpcomponents', module: 'httpclient'
        exclude group: 'com.google.guava', module: 'guava-jdk5'
    }
    implementation('com.google.apis:google-api-services-people:v1-rev159-1.23.0') {
        exclude group: 'org.apache.httpcomponents', module: 'httpclient'
        exclude group: 'com.google.guava', module: 'guava-jdk5'
    }
    // firebase
    implementation 'com.google.firebase:firebase-core:17.4.3'
    implementation 'com.google.firebase:firebase-messaging:20.2.1'
    implementation 'com.google.firebase:firebase-config:19.1.4'
    implementation 'com.google.firebase:firebase-analytics:17.4.3'
    implementation 'com.google.firebase:firebase-crashlytics:17.1.0'
    // Facebook
    implementation 'com.facebook.android:facebook-android-sdk:5.11.0'
    // youtube player api
    implementation files('libs/YouTubeAndroidPlayerApi.jar')
    // KaKao
    implementation'com.kakao.sdk:kakaolink:1.29.0'

    // MPAndroidChart
    implementation 'com.github.PhilJay:MPAndroidChart:v3.0.3'
    // NumberPicker
    implementation 'com.shawnlin:number-picker:2.4.10'
    // PagerIndicators
    implementation 'com.romandanylyk:pageindicatorview:1.0.3@aar'
    // Shimmer
    implementation 'com.facebook.shimmer:shimmer:0.5.0'

    // Java 8 - Stream, Optional
    implementation 'com.annimon:stream:1.2.1'

    // test
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.mockito:mockito-core:2.23.4'
    testImplementation 'org.robolectric:robolectric:4.3.1'
//    testImplementation 'org.robolectric:shadows-supportv4:4.2.1'
    testImplementation 'org.assertj:assertj-core:3.8.0'
    testImplementation 'com.squareup.okhttp:mockwebserver:1.2.1'
    testImplementation 'com.google.guava:guava:27.1-android'

    testImplementation 'androidx.test:core:1.2.0'
    testImplementation 'androidx.test:runner:1.2.0'
    testImplementation 'androidx.test.ext:junit:1.1.1'
    implementation("androidx.fragment:fragment-testing:1.2.0-alpha01", {
        exclude group: 'androidx.test', module: 'core'
    })

    // android test
    androidTestImplementation 'androidx.test:core:1.2.0'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation('androidx.test.espresso:espresso-core:3.1.0', {
        exclude group: 'androidx.annotation', module: 'annotation'
    })
}

apply plugin: 'com.google.gms.google-services'
apply plugin: 'realm-android'
apply plugin: 'com.google.firebase.crashlytics'

task getAppVersion() {
    def appVersion = "${majorVersion}.${minorVersion}.${patchVersion}"
    println '####' + appVersion + '####'
    return appVersion
}
