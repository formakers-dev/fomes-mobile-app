apply plugin: 'com.android.application'
apply from: "build-jacoco.gradle"

Properties localProperties = new Properties()
def localhostAddress = InetAddress.getLocalHost().getHostAddress()
try {
    localProperties.load(project.rootProject.file('local.properties').newDataInputStream())
    if (localhostAddress == '127.0.0.1' || !localhostAddress.contains('192')) {
        localhostAddress = localProperties.getProperty('my.localhost')
    }
} catch (Exception e) {
    println("You can't access local.properties file. Your localhost Address is " + localhostAddress);
}

project.ext.set("packageID", "Fomes")

def majorVersion = 0
def minorVersion = 1
def patchVersion = 1

android {
    compileSdkVersion 26
    buildToolsVersion '27.0.3'
    defaultConfig {
        applicationId "com.formakers.fomes"
        minSdkVersion 22
        targetSdkVersion 26
        multiDexEnabled true
        versionCode 4
        versionName "${majorVersion}.${minorVersion}.${patchVersion}"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    signingConfigs {
        debug {
            storeFile file('./debug.keystore')
        }
        release {
            keyAlias System.getenv("FOMES_KEY_ALIAS")
            keyPassword System.getenv("FOMES_KEY_PASSWORD")
            storeFile file(String.valueOf(System.getenv("FOMES_KEYSTORE")))
            storePassword System.getenv("FOMES_KEYSTORE_PASSWORD")
        }
    }
    buildTypes {
        debug {
            debuggable true
            testCoverageEnabled true
            buildConfigField 'String', 'SERVER_BASE_URL', "\"http://${localhostAddress}:8080/\""
            buildConfigField 'String', 'YOUTUBE_API_KEY', "\"${String.valueOf(System.getenv("YOUTUBE_API_KEY"))}\""
            signingConfig signingConfigs.debug
        }
        // DEV
        development {
            debuggable true
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField 'String', 'SERVER_BASE_URL', '"https://appbee-server-dev.herokuapp.com/"'
            buildConfigField 'String', 'YOUTUBE_API_KEY', "\"${String.valueOf(System.getenv("YOUTUBE_API_KEY"))}\""
            signingConfig signingConfigs.release
        }
        // STG
        staging {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField 'String', 'SERVER_BASE_URL', '"https://appbee-server-stg.herokuapp.com/"'
            buildConfigField 'String', 'YOUTUBE_API_KEY', "\"${String.valueOf(System.getenv("YOUTUBE_API_KEY"))}\""
            signingConfig signingConfigs.release
        }
        // PRD
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField 'String', 'SERVER_BASE_URL', '"http://fomesserver-env.wapcx7p5ip.ap-northeast-2.elasticbeanstalk.com/"'
            buildConfigField 'String', 'YOUTUBE_API_KEY', "\"${String.valueOf(System.getenv("YOUTUBE_API_KEY"))}\""
            signingConfig signingConfigs.release
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    testOptions {
        unitTests {
            includeAndroidResources = true
            all {
                forkEvery = 5
                jacoco {
                    includeNoLocationClasses = true
                }
            }
        }
    }
    configurations.all {
        resolutionStrategy.force 'com.google.code.findbugs:jsr305:1.3.9'
    }

    applicationVariants.all { variant ->
//        variant.javaCompile.options.compilerArgs += '-Xmaxerrs'
//        variant.javaCompile.options.compilerArgs += '10000'
//        variant.buildType.name        // BuildType
//        variant.getFlavors()[1].name  // Flavor

        variant.outputs.all {
            outputFileName = "${packageID}-${variant.versionName}-${variant.name}.apk"
        }
    }
}

android.applicationVariants.all {
    def aptOutputDir = new File(buildDir, "generated/source/apt/${it.unitTestVariant.dirName}")
    it.unitTestVariant.addJavaSourceFoldersToModel(aptOutputDir)
}

android.applicationVariants.all { variant ->
    def productFlavor = variant.productFlavors[0] != null ? "${variant.productFlavors[0].name.capitalize()}" : ""
    def buildType = "${variant.buildType.name.capitalize()}"
    tasks["compile${productFlavor}${buildType}UnitTestSources"].dependsOn(tasks["merge${productFlavor}${buildType}Assets"])
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'com.android.support:appcompat-v7:26.1.0'
    implementation 'com.android.support:cardview-v7:26.1.0'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    implementation 'com.android.support:design:26.1.0'
    // retrofit
    implementation 'com.squareup.retrofit2:retrofit:2.3.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.3.0'
    implementation 'com.squareup.retrofit2:adapter-rxjava:2.1.0'
    // okHttp
    implementation 'com.squareup.okhttp3:okhttp:3.8.1'
    implementation 'com.squareup.okhttp3:logging-interceptor:3.8.1'
    // gson
    implementation 'com.google.code.gson:gson:2.8.1'
    // butterknife
    implementation 'com.jakewharton:butterknife:8.8.1'
    annotationProcessor 'com.jakewharton:butterknife-compiler:8.8.1'
    testAnnotationProcessor 'com.jakewharton:butterknife-compiler:8.8.1'
    // dagger
    implementation 'com.google.dagger:dagger:2.11'
    annotationProcessor 'com.google.dagger:dagger-compiler:2.11'
    testAnnotationProcessor 'com.google.dagger:dagger-compiler:2.11'
    // rxJava
    implementation 'io.reactivex:rxandroid:1.2.1'
    implementation 'io.reactivex:rxjava:1.3.0'
    // guava
    implementation 'com.google.guava:guava:23.0-android'
    implementation 'com.google.guava:guava:21.0'
    // typekit
    implementation 'com.github.katoro:typekit:1.0.1'
    // Glide
    implementation 'com.github.bumptech.glide:glide:4.0.0'
    // google auth
    implementation 'com.google.android.gms:play-services-auth:16.0.0'
    implementation('com.google.api-client:google-api-client:1.23.0') {
        exclude group: 'org.apache.httpcomponents', module: 'httpclient'
        exclude group: 'com.google.guava', module: 'guava-jdk5'
    }
    implementation('com.google.api-client:google-api-client-android:1.23.0') {
        exclude group: 'org.apache.httpcomponents', module: 'httpclient'
        exclude group: 'com.google.guava', module: 'guava-jdk5'
    }
    implementation('com.google.apis:google-api-services-people:v1-rev159-1.23.0') {
        exclude group: 'org.apache.httpcomponents', module: 'httpclient'
        exclude group: 'com.google.guava', module: 'guava-jdk5'
    }
    // firebase
    implementation 'com.google.firebase:firebase-messaging:17.3.2'
    // youtube player api
    implementation files('libs/YouTubeAndroidPlayerApi.jar')
    // MPAndroidChart
    implementation 'com.github.PhilJay:MPAndroidChart:v3.0.3'
    // test
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.mockito:mockito-core:2.7.22'
    testImplementation 'org.robolectric:robolectric:3.8'
    testImplementation 'org.robolectric:shadows-supportv4:3.8'
    testImplementation 'org.assertj:assertj-core:3.8.0'
    testImplementation 'com.squareup.okhttp:mockwebserver:1.2.1'
    testImplementation 'com.google.guava:guava:23.0-android'
    // android test
    androidTestImplementation 'com.android.support.test:runner:1.0.2-alpha1'
    androidTestImplementation('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
}

apply plugin: 'com.google.gms.google-services'
apply plugin: 'realm-android'

task getAppVersion() {
    def appVersion = "${majorVersion}.${minorVersion}.${patchVersion}"
    println '####' + appVersion + '####'
    return appVersion
}
